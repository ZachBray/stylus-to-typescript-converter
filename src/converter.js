var endOfLine = require('os').EOL;
var Visitor = require('stylus').Visitor;

function Converter(trace, renamer, root, options) {
  Visitor.call(this, root);
  this.blurb = '// This file was generated by stsc. Please do not edit by hand.'
  this.trace = trace;
  this.renamer = renamer;
  this.options = options || {};
}

Converter.prototype = Object.create(Visitor.prototype);

Converter.prototype.constructor = Converter;

Converter.prototype.convert = function() {
  this.trace('Converting');
  this.exports = [];
  this.scope = new Set();
  this.indentationLevel = 0;
  this.expressionLevel = 0;
  this.visit(this.root);
  return this.blurb + endOfLine + this.exports.join(endOfLine + endOfLine);
};

Converter.prototype.indent = function() {
  this.indentationLevel++;
};

Converter.prototype.outdent = function() {
  this.indentationLevel--;
};

Converter.prototype.enterExpression = function() {
  this.expressionLevel++;
};

Converter.prototype.exitExpression = function() {
  this.expressionLevel--;
};

Converter.prototype.isInsideExpression = function() {
  return this.expressionLevel > 0;
}

Converter.prototype.addToScope = function(name) {
  return this.scope.add(name);
};

Converter.prototype.isInScope = function(name) {
  return this.scope.has(name);
};

Converter.prototype.write = function(text) {
  this.export += text;
};

Converter.prototype.writeQuoted = function(text) {
  if (this.options.useDoubleQuotes) {
    this.write('"' + text + '"');
  } else {
    this.write('\'' + text + '\'');
  }
};

Converter.prototype.writeEndOfLine = function() {
  this.export += endOfLine;
};

Converter.prototype.writeIndent = function() {
  for(var i = 0; i < this.indentationLevel; i++) {
    this.export += '  ';
  }
};

Converter.prototype.visitExports = function(container) {
  var self = this;
  self.trace('Visiting', container);
  container.nodes.forEach(function(node) {
    self.export = '';
    self.visit(node);
    self.export && self.exports.push(self.export);
    self.export = null;
  });
};

Converter.prototype.visitRoot = function(root) {
  this.visitExports(root);
};

Converter.prototype.visitGroup = function(group) {
  this.visitExports(group);
};

Converter.prototype.visitIdent = function(ident) {
  this.trace('Visiting', ident);
  var name = this.renamer.rename(ident.name);
  if (this.isInsideExpression()) {
    if (this.isInScope(name)) {
      this.write(name);
    } else {
      this.trace('Warning: ' + name + ' is not in scope. Treating as a string.');
      this.writeQuoted(name);
    }
  } else {
    this.addToScope(name);
    this.write('export const ' + name + ' = ');
    this.visit(ident.val);
    this.write(';');
  }
};

Converter.prototype.visitSelector = function(selector) {
  this.trace('Visiting', selector);
  var name = this.renamer.rename(selector.segments.join(''));
  this.addToScope(name);
  this.write('export const ' + name + ' = {');
  this.indent();
  this.visit(selector.block);
  this.writeEndOfLine();
  this.outdent();
  this.writeIndent();
  this.write('};');
};

Converter.prototype.visitBlock = function(block) {
  var self = this;
  self.trace('Visiting', block);
  block.nodes.forEach(function(node, i) {
    self.visit(node);
    if (i !== block.nodes.length - 1) {
      self.write(',');
    }
  });
};

Converter.prototype.visitProperty = function(property) {
  this.trace('Visiting', property);
  var name = this.renamer.rename(property.segments.join(''));
  this.writeEndOfLine();
  this.writeIndent();
  this.write(name + ': ');
  this.visit(property.expr);
};

Converter.prototype.visitExpression = function(expr) {
  this.trace('Visiting', expr);
  if (expr.isList) {
    throw new Error('Unsupported expression type.');
  }
  this.enterExpression();
  this.visit(expr.nodes[0]);
  this.exitExpression();
};

Converter.prototype.visitValue = function(value) {
  this.trace('Visiting', value);
  var textValue = value.toString();
  var isQuoted = textValue.charAt(0) === '"' || textValue.charAt(0) === '\'';
  if (isQuoted) {
    textValue = textValue.substr(1, textValue.length - 2);
  }
  if (isNaN(textValue)) {
    this.writeQuoted(textValue);
  } else {
    this.write(textValue);
  }
};

Converter.prototype.visitRGBA = Converter.prototype.visitValue;
Converter.prototype.visitCall = Converter.prototype.visitValue;
Converter.prototype.visitUnit = Converter.prototype.visitValue;
Converter.prototype.visitString = Converter.prototype.visitValue;

module.exports = Converter;
